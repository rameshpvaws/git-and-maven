/*
 * Copyright (C) 2012 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.commonjava.maven.ext.core.impl;

import org.commonjava.maven.ext.common.ManipulationException;
import org.commonjava.maven.ext.common.model.Project;
import org.commonjava.maven.ext.core.ManipulationSession;
import org.commonjava.maven.ext.core.state.State;
import org.commonjava.maven.ext.core.state.VersioningState;
import org.commonjava.maven.ext.core.util.IdUtils;

import java.util.List;
import java.util.Set;

/**
 * Represents one way that a POM may be manipulated/modified during pre-processing. State is kept separately for each {@link Manipulator}
 * (see {@link VersioningState}, associated with the {@link ProjectVersioningManipulator} implementation of this interface). State is stored in the
 * {@link ManipulationSession} instance. State consists of both configuration (normally detected from the user properties, or -D options on the command
 * line), and also changes detected in the scan() method invocation that will be applied later.
 *
 * Note that the order of the Manipulators is important. While later Manipulators such as the Remove* are not so important in terms of order, the
 * initial ones are. The order is currently:
 * [ Groovy - optionally first ]
 * ProfileInjection ; this can cause the project to be reevaluated (e.g. for new dependencies).
 * RESTCollector ; performs no changes itself, but scans the build for GAVs to send to the REST endpoint. It will
 *                 also populate later Manipulator states with the results.
 * .... rest of the manipulators ....
 * [ Groovy - optionally last ]
 *
 *
 * @author jdcasey
 */
public interface Manipulator
{

    /**
     * Initialize any state for the manipulator. States are stored via
     * {@link ManipulationSession#setState(State)} during this method's invocation,
     * for later use in the other methods of this interface.
     *
     * @param session the session to initialise with.
     * @throws ManipulationException if an error occurs.
     */
    void init( ManipulationSession session )
        throws ManipulationException;

    /**
     * Apply any changes to the raw models (stored in the {@link ManipulationSession} related to the given list of {@link Project} instances
     * (related by GAV string, generated by {@link IdUtils#gav(Project)}.
     *
     * @param projects the Projects to apply the changes to.
     * @return the set of changed projects.
     * @throws ManipulationException if an error occurs.
     */
    Set<Project> applyChanges( List<Project> projects )
        throws ManipulationException;

    /**
     * Determines the order in which manipulators are run, with the lowest number running first.
     * Uses a 100-point scale.
     * @return current index.
     */
    int getExecutionIndex();
}
